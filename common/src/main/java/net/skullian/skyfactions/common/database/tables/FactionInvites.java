/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.common.database.tables;


import java.util.Collection;

import net.skullian.skyfactions.common.database.DefaultSchema;
import net.skullian.skyfactions.common.database.tables.records.FactionInvitesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FactionInvites extends TableImpl<FactionInvitesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>faction_invites</code>
     */
    public static final FactionInvites FACTION_INVITES = new FactionInvites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FactionInvitesRecord> getRecordType() {
        return FactionInvitesRecord.class;
    }

    /**
     * The column <code>faction_invites.factionName</code>.
     */
    public final TableField<FactionInvitesRecord, String> FACTIONNAME = createField(DSL.name("factionName"), SQLDataType.VARCHAR(65535), this, "");

    /**
     * The column <code>faction_invites.uuid</code>.
     */
    public final TableField<FactionInvitesRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>faction_invites.inviter</code>.
     */
    public final TableField<FactionInvitesRecord, String> INVITER = createField(DSL.name("inviter"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>faction_invites.type</code>.
     */
    public final TableField<FactionInvitesRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>faction_invites.timestamp</code>.
     */
    public final TableField<FactionInvitesRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT, this, "");

    private FactionInvites(Name alias, Table<FactionInvitesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FactionInvites(Name alias, Table<FactionInvitesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>faction_invites</code> table reference
     */
    public FactionInvites(String alias) {
        this(DSL.name(alias), FACTION_INVITES);
    }

    /**
     * Create an aliased <code>faction_invites</code> table reference
     */
    public FactionInvites(Name alias) {
        this(alias, FACTION_INVITES);
    }

    /**
     * Create a <code>faction_invites</code> table reference
     */
    public FactionInvites() {
        this(DSL.name("faction_invites"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public FactionInvites as(String alias) {
        return new FactionInvites(DSL.name(alias), this);
    }

    @Override
    public FactionInvites as(Name alias) {
        return new FactionInvites(alias, this);
    }

    @Override
    public FactionInvites as(Table<?> alias) {
        return new FactionInvites(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FactionInvites rename(String name) {
        return new FactionInvites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FactionInvites rename(Name name) {
        return new FactionInvites(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FactionInvites rename(Table<?> name) {
        return new FactionInvites(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionInvites where(Condition condition) {
        return new FactionInvites(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionInvites where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionInvites where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionInvites where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionInvites where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionInvites where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionInvites where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionInvites where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionInvites whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionInvites whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
