/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.common.database.tables.pojos;


import java.io.Serializable;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlayerData implements Serializable {

    private static final long serialVersionUID = 1L;

    private final byte[] uuid;
    private final String discordId;
    private final Long lastRaid;
    private final String locale;

    public PlayerData(PlayerData value) {
        this.uuid = value.uuid;
        this.discordId = value.discordId;
        this.lastRaid = value.lastRaid;
        this.locale = value.locale;
    }

    public PlayerData(
        byte[] uuid,
        String discordId,
        Long lastRaid,
        String locale
    ) {
        this.uuid = uuid;
        this.discordId = discordId;
        this.lastRaid = lastRaid;
        this.locale = locale;
    }

    /**
     * Getter for <code>player_data.uuid</code>.
     */
    public byte[] getUuid() {
        return this.uuid;
    }

    /**
     * Getter for <code>player_data.discord_id</code>.
     */
    public String getDiscordId() {
        return this.discordId;
    }

    /**
     * Getter for <code>player_data.last_raid</code>.
     */
    public Long getLastRaid() {
        return this.lastRaid;
    }

    /**
     * Getter for <code>player_data.locale</code>.
     */
    public String getLocale() {
        return this.locale;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PlayerData other = (PlayerData) obj;
        if (this.uuid == null) {
            if (other.uuid != null)
                return false;
        }
        else if (!Arrays.equals(this.uuid, other.uuid))
            return false;
        if (this.discordId == null) {
            if (other.discordId != null)
                return false;
        }
        else if (!this.discordId.equals(other.discordId))
            return false;
        if (this.lastRaid == null) {
            if (other.lastRaid != null)
                return false;
        }
        else if (!this.lastRaid.equals(other.lastRaid))
            return false;
        if (this.locale == null) {
            if (other.locale != null)
                return false;
        }
        else if (!this.locale.equals(other.locale))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.uuid == null) ? 0 : Arrays.hashCode(this.uuid));
        result = prime * result + ((this.discordId == null) ? 0 : this.discordId.hashCode());
        result = prime * result + ((this.lastRaid == null) ? 0 : this.lastRaid.hashCode());
        result = prime * result + ((this.locale == null) ? 0 : this.locale.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PlayerData (");

        sb.append("[binary...]");
        sb.append(", ").append(discordId);
        sb.append(", ").append(lastRaid);
        sb.append(", ").append(locale);

        sb.append(")");
        return sb.toString();
    }
}
