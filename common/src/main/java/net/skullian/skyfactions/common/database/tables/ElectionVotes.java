/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.common.database.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.skullian.skyfactions.common.database.DefaultSchema;
import net.skullian.skyfactions.common.database.Keys;
import net.skullian.skyfactions.common.database.tables.FactionElections.FactionElectionsPath;
import net.skullian.skyfactions.common.database.tables.records.ElectionVotesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ElectionVotes extends TableImpl<ElectionVotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>election_votes</code>
     */
    public static final ElectionVotes ELECTION_VOTES = new ElectionVotes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElectionVotesRecord> getRecordType() {
        return ElectionVotesRecord.class;
    }

    /**
     * The column <code>election_votes.election</code>.
     */
    public final TableField<ElectionVotesRecord, Integer> ELECTION = createField(DSL.name("election"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>election_votes.uuid</code>.
     */
    public final TableField<ElectionVotesRecord, byte[]> UUID = createField(DSL.name("uuid"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>election_votes.votedFor</code>.
     */
    public final TableField<ElectionVotesRecord, String> VOTEDFOR = createField(DSL.name("votedFor"), SQLDataType.CLOB, this, "");

    private ElectionVotes(Name alias, Table<ElectionVotesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ElectionVotes(Name alias, Table<ElectionVotesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>election_votes</code> table reference
     */
    public ElectionVotes(String alias) {
        this(DSL.name(alias), ELECTION_VOTES);
    }

    /**
     * Create an aliased <code>election_votes</code> table reference
     */
    public ElectionVotes(Name alias) {
        this(alias, ELECTION_VOTES);
    }

    /**
     * Create a <code>election_votes</code> table reference
     */
    public ElectionVotes() {
        this(DSL.name("election_votes"), null);
    }

    public <O extends Record> ElectionVotes(Table<O> path, ForeignKey<O, ElectionVotesRecord> childPath, InverseForeignKey<O, ElectionVotesRecord> parentPath) {
        super(path, childPath, parentPath, ELECTION_VOTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ElectionVotesPath extends ElectionVotes implements Path<ElectionVotesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ElectionVotesPath(Table<O> path, ForeignKey<O, ElectionVotesRecord> childPath, InverseForeignKey<O, ElectionVotesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ElectionVotesPath(Name alias, Table<ElectionVotesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ElectionVotesPath as(String alias) {
            return new ElectionVotesPath(DSL.name(alias), this);
        }

        @Override
        public ElectionVotesPath as(Name alias) {
            return new ElectionVotesPath(alias, this);
        }

        @Override
        public ElectionVotesPath as(Table<?> alias) {
            return new ElectionVotesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ElectionVotesRecord> getPrimaryKey() {
        return Keys.ELECTION_VOTES__PK_ELECTION_VOTES;
    }

    @Override
    public List<ForeignKey<ElectionVotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ELECTION_VOTES__FK_ELECTION_VOTES_PK_FACTION_ELECTIONS);
    }

    private transient FactionElectionsPath _factionElections;

    /**
     * Get the implicit join path to the <code>faction_elections</code> table.
     */
    public FactionElectionsPath factionElections() {
        if (_factionElections == null)
            _factionElections = new FactionElectionsPath(this, Keys.ELECTION_VOTES__FK_ELECTION_VOTES_PK_FACTION_ELECTIONS, null);

        return _factionElections;
    }

    @Override
    public ElectionVotes as(String alias) {
        return new ElectionVotes(DSL.name(alias), this);
    }

    @Override
    public ElectionVotes as(Name alias) {
        return new ElectionVotes(alias, this);
    }

    @Override
    public ElectionVotes as(Table<?> alias) {
        return new ElectionVotes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElectionVotes rename(String name) {
        return new ElectionVotes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElectionVotes rename(Name name) {
        return new ElectionVotes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElectionVotes rename(Table<?> name) {
        return new ElectionVotes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElectionVotes where(Condition condition) {
        return new ElectionVotes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElectionVotes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElectionVotes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElectionVotes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElectionVotes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElectionVotes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElectionVotes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElectionVotes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElectionVotes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElectionVotes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
