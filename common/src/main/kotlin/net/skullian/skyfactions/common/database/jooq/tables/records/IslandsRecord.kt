/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.common.database.jooq.tables.records


import net.skullian.skyfactions.common.database.jooq.tables.Islands

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class IslandsRecord() : UpdatableRecordImpl<IslandsRecord>(Islands.ISLANDS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var uuid: ByteArray?
        set(value): Unit = set(1, value)
        get(): ByteArray? = get(1) as ByteArray?

    open var lastRaided: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var trustedPlayers: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised IslandsRecord
     */
    constructor(id: Int? = null, uuid: ByteArray? = null, lastRaided: Long? = null, trustedPlayers: String? = null): this() {
        this.id = id
        this.uuid = uuid
        this.lastRaided = lastRaided
        this.trustedPlayers = trustedPlayers
        resetTouchedOnNotNull()
    }
}
