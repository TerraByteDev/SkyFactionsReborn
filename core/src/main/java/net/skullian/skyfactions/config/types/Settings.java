package net.skullian.skyfactions.config.types;

import dev.dejvokep.boostedyaml.YamlDocument;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

@Getter
public enum Settings {

    DATABASE_TYPE("Database.TYPE"),
    DATABASE_HOST("Database.DATABASE_HOST"),
    DATABASE_NAME("Database.DATABASE_NAME"),
    DATABASE_USERNAME("Database.DATABASE_USERNAME"),
    DATABASE_PASSWORD("Database.DATABASE_PASSWORD"),
    DATABASE_MAX_LIFETIME("Database.MAX_LIFETIME"),
    DATABASE_MAX_POOL_SIZE("Database.MAX_POOL_SIZE"),
    CACHE_SAVE_INTERVAL("Database.CACHE_SAVE_INTERVAL"),

    DEFAULT_LANGUAGE("Language.DEFAULT_LANGUAGE"),

    HUB_WORLD_NAME("Hub.WORLD_NAME"),
    HUB_LOCATION("Hub.HUB_LOCATION"),

    COMMAND_COOLDOWN("Cooldowns.COMMAND"),
    ITEM_COOLDOWN("Cooldowns.GUI_ITEM"),

    SOUNDS_ISLAND_CREATE_SUCCESS("Sounds.ISLAND_CREATE_SUCCESS"),
    SOUNDS_ISLAND_CREATE_SUCCESS_PITCH("Sounds.ISLAND_CREATE_SUCCESS_PITCH"),
    ALARM_SOUND("Sounds.ALARM_SOUND"),
    ALARM_SOUND_PITCH("Sounds.ALARM_PITCH"),
    COUNTDOWN_SOUND("Sounds.COUNTDOWN_SOUND"),
    COUNTDOWN_SOUND_PITCH("Sounds.COUNTDOWN_PITCH"),
    ERROR_SOUND("Sounds.ERROR_SOUND"),
    ERROR_SOUND_PITCH("Sounds.ERROR_SOUND_PITCH"),
    DEFENCE_PURCHASE_SUCCESS_SOUND("Sounds.DEFENCE_PURCHASE_SUCCESS_SOUND"),
    DEFENCE_PURCHASE_SUCCESS_SOUND_PITCH("Sounds.DEFENCE_PURCHASE_SUCCESS_SOUND_PITCH"),

    ISLAND_FACTION_WORLD("Island.FACTION_WORLD_NAME"),
    ISLAND_PLAYER_WORLD("Island.ISLAND_WORLD_NAME"),
    ISLAND_PLAYER_SCHEMATIC("Island.NORMAL_ISLAND_SCHEMATIC"),
    ISLAND_FACTION_SCHEMATIC("Island.FACTION_ISLAND_SCHEMATIC"),
    ISLAND_TELEPORT_ON_JOIN("Island.TELEPORT_ON_JOIN"),
    ISLAND_TELEPORT_ON_DEATH("Island.TELEPORT_ON_DEATH"),
    ISLAND_PREVENT_NETHER_PORTALS("Island.PREVENT_NETHER_PORTALS"),
    ISLAND_ALLOWED_DIMENSIONS("Island.ALLOWED_DIMENSIONS"),

    NPC_INTEGRATION_ENABLED("NPC.ENABLED"),
    NPC_PLAYER_ISLANDS_ENTITY("NPC.ENTITY.PLAYER_ISLANDS"),
    NPC_FACTION_ISLANDS_ENTITY("NPC.ENTITY.FACTION_ISLANDS"),
    NPC_FACTORY("NPC.FACTORY"),
    NPC_PLAYER_ISLANDS_NAME("NPC.NAMES.PLAYER_ISLANDS"),
    NPC_FACTION_ISLANDS_NAME("NPC.NAMES.FACTION_ISLANDS"),
    NPC_PLAYER_ISLANDS_SKIN("NPC.SKINS.PLAYER_ISLANDS"),
    NPC_FACTION_ISLANDS_SKIN("NOC.SKINS.FACTION_ISLANDS"),
    NPC_PLAYER_ISLANDS_OFFSET("NPC.OFFSETS.PLAYER_ISLANDS"),
    NPC_FACTION_ISLANDS_OFFSET("NPC.OFFSETS.FACTION_ISLANDS"),

    GEN_PLAYER_REGION_SIZE("Generation.PLAYER_ISLANDS.REGION_SIZE"),
    GEN_PLAYER_REGION_PADDING("Generation.PLAYER_ISLANDS.REGION_PADDING"),
    GEN_PLAYER_GRID_ORIGIN("Generation.PLAYER_ISLANDS.GRID_ORIGIN"),

    GEN_FACTION_REGION_SIZE("Generation.FACTION_ISLANDS.REGION_SIZE"),
    GEN_FACTION_REGION_PADDING("Generation.FACTION_ISLANDS.REGION_PADDING"),
    GEN_FACTION_GRID_ORIGIN("Generation.FACTION_ISLANDS.GRID_ORIGIN"),

    GEMS_CAN_WIDHTRAW("Gems.CAN_WITHDRAW"),
    GEMS_MATERIAL("Gems.MATERIAL"),
    GEMS_CUSTOM_MODEL_DATA("Gems.CUSTOM_MODEL_DATA"),

    RAIDING_COST("Raiding.RAIDING_COST"),
    RAIDING_COOLDOWN("Raiding.RAIDING_COOLDOWN"),
    RAIDED_COOLDOWN("Raiding.RAIDED_COOLDOWN"),
    RAIDING_SPAWN_HEIGHT("Raiding.SPAWN_HEIGHT"),
    RAIDING_MUSIC_FILES("Raiding.MUSIC_FILE_NAMES"),
    RAIDING_SPAWN_RADIUS("Raiding.RANDOM_SPAWN_RADIUS"),
    RAIDING_COUNTDOWN_DURATION("Raiding.COUNTDOWN_DURATION"),
    RAIDING_TELEPORT_TO_PREPARATION_AREA("Raiding.TELEPORT_TO_PREPARATION"),
    RAIDING_PREPARATION_WORLD("Raiding.RAID_PREPARATION_WORLD"),
    RAIDING_PREPARATION_POS("Raiding.RAID_PREPARATION_POS"),
    RAIDING_PREPARATION_TIME("Raiding.RAID_PREPARATION_TIME"),
    RAIDING_PLAYER_IMMUNITY("Raiding.PLAYER_RAID_IMMUNITY"),
    RAIDING_FACTION_IMMUNITY("Raiding.FACTION_RAID_IMMUNITY"),

    FACTION_CREATION_MIN_LENGTH("Factions.FACTION_CREATION.MINIMUM_NAME_LENGTH"),
    FACTION_CREATION_MAX_LENGTH("Factions.FACTION_CREATION.MAXIMUM_NAME_LENGTH"),
    FACTION_CREATION_ALLOW_NUMBERS("Factions.FACTION_CREATION.ALLOW_NUMBERS"),
    FACTION_CREATION_ALLOW_NON_ENGLISH("Factions.FACTION_CREATION.ALLOW_NON_ENGLISH"),
    FACTION_CREATION_ALLOW_SYMBOLS("Factions.FACTION_CREATION.ALLOW_SYMBOLS"),
    FACTION_CREATION_BLACKLISTED_NAMES("Factions.FACTION_CREATION.BLACKLISTED_NAMES"),
    FACTION_CREATION_COST("Factions.FACTION_CREATION.CREATION_COST"),

    FACTION_RENAME_ENABLED("Factions.FACTION_RENAMING.ALLOW_RENAMING"),
    FACTION_RENAME_COOLDOWN("Factions.FACTION_RENAMING.COOLDOWN"),
    FACTION_RENAME_COST("Factions.FACTION_RENAMING.RENAME_COST"),

    FACTION_BAN_PERMISSIONS("Factions.FACTION_RANKS.BAN"),
    FACTION_KICK_PERMISSIONS("Factions.FACTION_RANKS.KICK"),
    FACTION_MANAGE_RANK_PERMISSIONS("Factions.FACTION_RANKS.MANAGE_RANK"),
    FACTION_MODIFY_MOTD_PERMISSIONS("Factions.FACTION_RANKS.MODIFY_MOTD"),
    FACTION_MANAGE_INVITES_PERMISSIONS("Factions.FACTION_RANKS.MANAGE_INVITES"),
    FACTION_CREATE_BROADCAST_PERMISSIONS("Factions.FACTION_RANKS.CREATE_BROADCAST"),

    FACTION_MANAGE_BROADCAST_KICKS("Factions.FACTION_MANAGE.BROADCAST_KICKS"),
    FACTION_MANAGE_BROADCAST_BANS("Factions.FACTION_MANAGE.BROADCAST_BANS"),
    FACTION_MANAGE_RANK_SHOW_ENCHANTED("Factions.FACTION_MANAGE.MANAGE_RANK.SHOW_ENCHANTED"),

    NOTIFICATIONS_INTERVAL("Notifications.INTERVAL");

    @Setter
    private static YamlDocument config;
    private final String path;

    Settings(String path) {
        this.path = path;
    }

    public List<String> getList() {
        return config.getStringList(this.path);
    }

    public List<Integer> getIntegerList() {
        return config.getIntList(this.path);
    }

    public String getString() {
        return config.getString(this.path);
    }

    public int getInt() {
        return config.getInt(this.path);
    }

    public long getLong() {
        return config.getLong(this.path);
    }

    public boolean getBoolean() {
        return config.getBoolean(this.path);
    }


}
