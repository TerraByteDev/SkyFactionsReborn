/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.database.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.skullian.skyfactions.database.DefaultSchema;
import net.skullian.skyfactions.database.Indexes;
import net.skullian.skyfactions.database.Keys;
import net.skullian.skyfactions.database.tables.ElectionVotes.ElectionVotesPath;
import net.skullian.skyfactions.database.tables.records.FactionElectionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FactionElections extends TableImpl<FactionElectionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>faction_elections</code>
     */
    public static final FactionElections FACTION_ELECTIONS = new FactionElections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FactionElectionsRecord> getRecordType() {
        return FactionElectionsRecord.class;
    }

    /**
     * The column <code>faction_elections.id</code>.
     */
    public final TableField<FactionElectionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>faction_elections.factionName</code>.
     */
    public final TableField<FactionElectionsRecord, String> FACTIONNAME = createField(DSL.name("factionName"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>faction_elections.endDate</code>.
     */
    public final TableField<FactionElectionsRecord, LocalDate> ENDDATE = createField(DSL.name("endDate"), SQLDataType.LOCALDATE, this, "");

    private FactionElections(Name alias, Table<FactionElectionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FactionElections(Name alias, Table<FactionElectionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>faction_elections</code> table reference
     */
    public FactionElections(String alias) {
        this(DSL.name(alias), FACTION_ELECTIONS);
    }

    /**
     * Create an aliased <code>faction_elections</code> table reference
     */
    public FactionElections(Name alias) {
        this(alias, FACTION_ELECTIONS);
    }

    /**
     * Create a <code>faction_elections</code> table reference
     */
    public FactionElections() {
        this(DSL.name("faction_elections"), null);
    }

    public <O extends Record> FactionElections(Table<O> path, ForeignKey<O, FactionElectionsRecord> childPath, InverseForeignKey<O, FactionElectionsRecord> parentPath) {
        super(path, childPath, parentPath, FACTION_ELECTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FactionElectionsPath extends FactionElections implements Path<FactionElectionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FactionElectionsPath(Table<O> path, ForeignKey<O, FactionElectionsRecord> childPath, InverseForeignKey<O, FactionElectionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FactionElectionsPath(Name alias, Table<FactionElectionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FactionElectionsPath as(String alias) {
            return new FactionElectionsPath(DSL.name(alias), this);
        }

        @Override
        public FactionElectionsPath as(Name alias) {
            return new FactionElectionsPath(alias, this);
        }

        @Override
        public FactionElectionsPath as(Table<?> alias) {
            return new FactionElectionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FACTIONELECTIONSFACTIONNAMEINDEX);
    }

    @Override
    public Identity<FactionElectionsRecord, Integer> getIdentity() {
        return (Identity<FactionElectionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FactionElectionsRecord> getPrimaryKey() {
        return Keys.FACTION_ELECTIONS__PK_FACTION_ELECTIONS;
    }

    private transient ElectionVotesPath _electionVotes;

    /**
     * Get the implicit to-many join path to the <code>election_votes</code>
     * table
     */
    public ElectionVotesPath electionVotes() {
        if (_electionVotes == null)
            _electionVotes = new ElectionVotesPath(this, null, Keys.ELECTION_VOTES__FK_ELECTION_VOTES_PK_FACTION_ELECTIONS.getInverseKey());

        return _electionVotes;
    }

    @Override
    public FactionElections as(String alias) {
        return new FactionElections(DSL.name(alias), this);
    }

    @Override
    public FactionElections as(Name alias) {
        return new FactionElections(alias, this);
    }

    @Override
    public FactionElections as(Table<?> alias) {
        return new FactionElections(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FactionElections rename(String name) {
        return new FactionElections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FactionElections rename(Name name) {
        return new FactionElections(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FactionElections rename(Table<?> name) {
        return new FactionElections(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionElections where(Condition condition) {
        return new FactionElections(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionElections where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionElections where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionElections where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionElections where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionElections where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionElections where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FactionElections where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionElections whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FactionElections whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
