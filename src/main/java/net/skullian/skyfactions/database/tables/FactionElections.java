/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.database.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.skullian.skyfactions.database.DefaultSchema;
import net.skullian.skyfactions.database.Indexes;
import net.skullian.skyfactions.database.Keys;
import net.skullian.skyfactions.database.tables.Electionvotes.ElectionvotesPath;
import net.skullian.skyfactions.database.tables.records.FactionelectionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Factionelections extends TableImpl<FactionelectionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>factionElections</code>
     */
    public static final Factionelections FACTIONELECTIONS = new Factionelections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FactionelectionsRecord> getRecordType() {
        return FactionelectionsRecord.class;
    }

    /**
     * The column <code>factionElections.id</code>.
     */
    public final TableField<FactionelectionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>factionElections.factionName</code>.
     */
    public final TableField<FactionelectionsRecord, String> FACTIONNAME = createField(DSL.name("factionName"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>factionElections.endDate</code>.
     */
    public final TableField<FactionelectionsRecord, LocalDateTime> ENDDATE = createField(DSL.name("endDate"), SQLDataType.LOCALDATETIME(0), this, "");

    private Factionelections(Name alias, Table<FactionelectionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Factionelections(Name alias, Table<FactionelectionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>factionElections</code> table reference
     */
    public Factionelections(String alias) {
        this(DSL.name(alias), FACTIONELECTIONS);
    }

    /**
     * Create an aliased <code>factionElections</code> table reference
     */
    public Factionelections(Name alias) {
        this(alias, FACTIONELECTIONS);
    }

    /**
     * Create a <code>factionElections</code> table reference
     */
    public Factionelections() {
        this(DSL.name("factionElections"), null);
    }

    public <O extends Record> Factionelections(Table<O> path, ForeignKey<O, FactionelectionsRecord> childPath, InverseForeignKey<O, FactionelectionsRecord> parentPath) {
        super(path, childPath, parentPath, FACTIONELECTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FactionelectionsPath extends Factionelections implements Path<FactionelectionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FactionelectionsPath(Table<O> path, ForeignKey<O, FactionelectionsRecord> childPath, InverseForeignKey<O, FactionelectionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FactionelectionsPath(Name alias, Table<FactionelectionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FactionelectionsPath as(String alias) {
            return new FactionelectionsPath(DSL.name(alias), this);
        }

        @Override
        public FactionelectionsPath as(Name alias) {
            return new FactionelectionsPath(alias, this);
        }

        @Override
        public FactionelectionsPath as(Table<?> alias) {
            return new FactionelectionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FACTIONELECTIONSFACTIONNAMEINDEX);
    }

    @Override
    public Identity<FactionelectionsRecord, Integer> getIdentity() {
        return (Identity<FactionelectionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FactionelectionsRecord> getPrimaryKey() {
        return Keys.FACTIONELECTIONS__PK_FACTIONELECTIONS;
    }

    @Override
    public List<UniqueKey<FactionelectionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FACTIONELECTIONS__UK_FACTIONELECTIONS_1_128141898);
    }

    private transient ElectionvotesPath _electionvotes;

    /**
     * Get the implicit to-many join path to the <code>electionVotes</code>
     * table
     */
    public ElectionvotesPath electionvotes() {
        if (_electionvotes == null)
            _electionvotes = new ElectionvotesPath(this, null, Keys.ELECTIONVOTES__FK_ELECTIONVOTES_PK_FACTIONELECTIONS.getInverseKey());

        return _electionvotes;
    }

    @Override
    public Factionelections as(String alias) {
        return new Factionelections(DSL.name(alias), this);
    }

    @Override
    public Factionelections as(Name alias) {
        return new Factionelections(alias, this);
    }

    @Override
    public Factionelections as(Table<?> alias) {
        return new Factionelections(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Factionelections rename(String name) {
        return new Factionelections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Factionelections rename(Name name) {
        return new Factionelections(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Factionelections rename(Table<?> name) {
        return new Factionelections(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factionelections where(Condition condition) {
        return new Factionelections(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factionelections where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factionelections where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factionelections where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factionelections where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factionelections where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factionelections where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factionelections where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factionelections whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factionelections whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
