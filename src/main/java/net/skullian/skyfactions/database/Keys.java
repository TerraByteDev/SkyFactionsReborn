/*
 * This file is generated by jOOQ.
 */
package net.skullian.skyfactions.database;


import net.skullian.skyfactions.database.tables.ElectionVotes;
import net.skullian.skyfactions.database.tables.FactionElections;
import net.skullian.skyfactions.database.tables.Factionislands;
import net.skullian.skyfactions.database.tables.Factionmembers;
import net.skullian.skyfactions.database.tables.Factions;
import net.skullian.skyfactions.database.tables.FlywaySchemaHistory;
import net.skullian.skyfactions.database.tables.Islands;
import net.skullian.skyfactions.database.tables.Playerdata;
import net.skullian.skyfactions.database.tables.Trustedplayers;
import net.skullian.skyfactions.database.tables.records.ElectionVotesRecord;
import net.skullian.skyfactions.database.tables.records.FactionElectionsRecord;
import net.skullian.skyfactions.database.tables.records.FactionislandsRecord;
import net.skullian.skyfactions.database.tables.records.FactionmembersRecord;
import net.skullian.skyfactions.database.tables.records.FactionsRecord;
import net.skullian.skyfactions.database.tables.records.FlywaySchemaHistoryRecord;
import net.skullian.skyfactions.database.tables.records.IslandsRecord;
import net.skullian.skyfactions.database.tables.records.PlayerdataRecord;
import net.skullian.skyfactions.database.tables.records.TrustedplayersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ElectionVotesRecord> ELECTION_VOTES__PK_ELECTION_VOTES = Internal.createUniqueKey(ElectionVotes.ELECTION_VOTES, DSL.name("pk_election_votes"), new TableField[] { ElectionVotes.ELECTION_VOTES.ELECTION }, true);
    public static final UniqueKey<FactionElectionsRecord> FACTION_ELECTIONS__PK_FACTION_ELECTIONS = Internal.createUniqueKey(FactionElections.FACTION_ELECTIONS, DSL.name("pk_faction_elections"), new TableField[] { FactionElections.FACTION_ELECTIONS.ID }, true);
    public static final UniqueKey<FactionislandsRecord> FACTIONISLANDS__PK_FACTIONISLANDS = Internal.createUniqueKey(Factionislands.FACTIONISLANDS, DSL.name("pk_factionIslands"), new TableField[] { Factionislands.FACTIONISLANDS.ID }, true);
    public static final UniqueKey<FactionmembersRecord> FACTIONMEMBERS__PK_FACTIONMEMBERS = Internal.createUniqueKey(Factionmembers.FACTIONMEMBERS, DSL.name("pk_factionMembers"), new TableField[] { Factionmembers.FACTIONMEMBERS.UUID }, true);
    public static final UniqueKey<FactionsRecord> FACTIONS__PK_FACTIONS = Internal.createUniqueKey(Factions.FACTIONS, DSL.name("pk_factions"), new TableField[] { Factions.FACTIONS.NAME }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY__PK_FLYWAY_SCHEMA_HISTORY = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("pk_flyway_schema_history"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<IslandsRecord> ISLANDS__PK_ISLANDS = Internal.createUniqueKey(Islands.ISLANDS, DSL.name("pk_islands"), new TableField[] { Islands.ISLANDS.ID }, true);
    public static final UniqueKey<PlayerdataRecord> PLAYERDATA__PK_PLAYERDATA = Internal.createUniqueKey(Playerdata.PLAYERDATA, DSL.name("pk_playerData"), new TableField[] { Playerdata.PLAYERDATA.UUID }, true);
    public static final UniqueKey<TrustedplayersRecord> TRUSTEDPLAYERS__PK_TRUSTEDPLAYERS = Internal.createUniqueKey(Trustedplayers.TRUSTEDPLAYERS, DSL.name("pk_trustedPlayers"), new TableField[] { Trustedplayers.TRUSTEDPLAYERS.ISLAND_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ElectionVotesRecord, FactionElectionsRecord> ELECTION_VOTES__FK_ELECTION_VOTES_PK_FACTION_ELECTIONS = Internal.createForeignKey(ElectionVotes.ELECTION_VOTES, DSL.name("fk_election_votes_pk_faction_elections"), new TableField[] { ElectionVotes.ELECTION_VOTES.ELECTION }, Keys.FACTION_ELECTIONS__PK_FACTION_ELECTIONS, new TableField[] { FactionElections.FACTION_ELECTIONS.ID }, true);
    public static final ForeignKey<FactionElectionsRecord, FactionsRecord> FACTION_ELECTIONS__FK_FACTION_ELECTIONS_PK_FACTIONS = Internal.createForeignKey(FactionElections.FACTION_ELECTIONS, DSL.name("fk_faction_elections_pk_factions"), new TableField[] { FactionElections.FACTION_ELECTIONS.FACTION_NAME }, Keys.FACTIONS__PK_FACTIONS, new TableField[] { Factions.FACTIONS.NAME }, true);
}
