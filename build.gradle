import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
    }

    dependencies {
        classpath "org.xerial:sqlite-jdbc:${sqlite_jdbc}"
    }
}

plugins {
    id 'com.gradleup.shadow' version "${shadow_version}"
    id 'java'
    id "xyz.jpenilla.run-paper" version "${run_paper_version}"
    id 'org.flywaydb.flyway' version "${flyway_version}"
    id "org.jooq.jooq-codegen-gradle" version "${jooq_codegen_version}"
}

group = 'net.skullian.skyfactions'
version = '1.21.1-v1.0.0-ALPHA'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()

        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }

        maven {
            name = "EngineHub"
            url = "https://maven.enginehub.org/repo/"
        }

        maven {
            name = "PlaceholderAPI"
            url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
        }

        maven {
            name = "XenonDevs Releases"
            url = "https://repo.xenondevs.xyz/releases"
        }

        maven {
            name = "CodeMC Public"
            url = "https://repo.codemc.org/repository/maven-public/"
        }

        maven {
            name = "EssentialsX Releases"
            url = "https://repo.essentialsx.net/releases/"
        }

        maven {
            name = "eldonexus"
            url = uri("https://eldonexus.de/repository/maven-releases/")
        }

        maven {
            name = "Lumine Public"
            url = "https://mvn.lumine.io/repository/maven-public/"
        }

        maven {
            name = "Pyr's Snapshots"
            url = "https://repo.pyr.lol/snapshots"
        }

        maven {
            name = "JitPack"
            url "https://jitpack.io"
        }

        maven {
            name = "EvokeGames Snapshots"
            url = "https://maven.evokegames.gg/snapshots"
        }

        maven {
            name = "SpigotMC Snapshots"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }

        maven {
            name = "FancyNPCs Repository"
            url = "https://repo.fancyplugins.de/releases"
        }

        maven {
            name = "CraftationGaming Chaos"
            url = "https://repo.craftationgaming.com/chaos"
        }

        maven {
            name = "Oraxen Repository"
            url = "https://repo.oraxen.com/releases"
        }
    }

    dependencies {
        compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")

        compileOnly("org.projectlombok:lombok:${lombok}")
        annotationProcessor("org.projectlombok:lombok:${lombok}")
        compileOnly("me.clip:placeholderapi:${placeholder_api}")
        compileOnly("com.zaxxer:HikariCP:${hikaricp}")
        compileOnly("xyz.xenondevs.invui:invui:${invui}")
        implementation(platform("com.intellectualsites.bom:bom-newest:${fawe_bom}"))
        compileOnly("com.fastasyncworldedit:FastAsyncWorldEdit-Core:${fawe}")
        compileOnly("com.fastasyncworldedit:FastAsyncWorldEdit-Bukkit:${fawe}")
        compileOnly("com.sk89q.worldguard:worldguard-bukkit:${worldguard}")
        compileOnly("org.xerial:sqlite-jdbc:${sqlite_jdbc}")
        compileOnly("net.dv8tion:JDA:${jda}")
        compileOnly("fr.skytasul:jukebox:${jukebox}")
        compileOnly("com.github.koca2000:NoteBlockAPI:${noteblockapi}")
        compileOnly("com.fasterxml.jackson.core:jackson-databind:${jackson}")
        compileOnly("com.mojang:authlib:${authlib}")
        compileOnly("com.jeff-media:custom-block-data:${customblockdata}")
        compileOnly("io.lumine:Mythic-Dist:${mythicmobs}")
        compileOnly("net.objecthunter:exp4j:${exp4j}")
        compileOnly("com.github.retrooper:packetevents-spigot:${packetevents}")
        implementation("me.tofaa.entitylib:spigot:${entitylib}")
        //implementation("me.tofaa.entitylib:spigot:${entitylib}")
        compileOnly("dev.dejvokep:boosted-yaml:${boostedyaml}")
        compileOnly("org.incendo:cloud-paper:${cloud}-SNAPSHOT")
        compileOnly("org.incendo:cloud-core:${cloud}")
        compileOnly("org.incendo:cloud-annotations:${cloud}")
        compileOnly("lol.pyr:znpcsplus-api:${znpcsplus}")
        compileOnly("net.kyori:adventure-text-minimessage:${minimessage}")
        compileOnly("de.oliver:FancyNpcs:${fancynpcs}")
        compileOnly("com.github.MilkBowl:VaultAPI:${vaultapi}")
        compileOnly("me.RockinChaos.itemjoin:ItemJoin:${itemjoin}")
        compileOnly("io.th0rgal:oraxen:${oraxen}")
        compileOnly("com.github.LoneDev6:API-ItemsAdder:${itemsadder}")
        compileOnly("org.jooq:jooq:${jooq_codegen_version}")
        compileOnly("org.flywaydb:flyway-core:${flyway_core}")
    }
}

dependencies {
    implementation(project(":core"))
    implementation(project(":v1_21_R1"))

    jooqCodegen("org.xerial:sqlite-jdbc:${sqlite_jdbc}")
}


tasks {
    shadowJar {
        archiveClassifier.set('')
        configurations = [project.configurations.runtimeClasspath]

        dependsOn(":v1_21_R1:reobfJar")
    }

    runServer {
        downloadPlugins {
            modrinth("FastAsyncWorldEdit", "2.12.0")
            modrinth("ViaVersion", "5.1.1")
            modrinth("PacketEvents", "2.6.0")
            modrinth("pworlds", "2.0.12")

            hangar("PlaceholderAPI", "2.11.6")

            github("xtkq-is-not-available", "VoidGen", "v2.2.1", "VoidGen-2.2.1.jar")
            github("MilkBowl", "Vault", "1.7.3", "Vault.jar")

            url("https://ci.enginehub.org/repository/download/bt11/25367:id/worldguard-bukkit-7.0.12-dist.jar?branch=version/7.0.x&guest=1")
            url("https://download.luckperms.net/1561/bukkit/loader/LuckPerms-Bukkit-5.4.146.jar")
        }
        minecraftVersion("1.21")
    }

    assemble {
        dependsOn("shadowJar")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

configurations {
    flywayMigration
}

flyway {
    configurations = ['flywayMigration']
    url = 'jdbc:sqlite:file:./assets/data.sqlite3'
    user = 'sa'
    password = ''
    locations = ["classpath:net/skullian/skyfactions/database/migrations"]
}

jooq {
    configuration {
        logging = org.jooq.meta.jaxb.Logging.DEBUG
        jdbc {
            driver = 'org.sqlite.JDBC'
            url = flyway.url
            user = flyway.user
            password = flyway.password
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                includes = '.*'
                excludes = ''
            }
            generate {
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'net.skullian.skyfactions.database'
                directory = 'core/src/main/java/'
                clean = false
            }
        }
    }
}

tasks.named('flywayMigrate').configure {
    System.setProperty("net.skullian.codegen", "true");

    dependsOn tasks.named('classes')
}

tasks.named('jooqCodegen').configure {

    dependsOn tasks.named('flywayMigrate')

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "version": project.property("version")
    ]
}