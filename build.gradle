import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    //id("net.ltgt.errorprone") version "4.1.0"
    id("io.papermc.paperweight.userdev") version "1.7.4"
    id 'com.gradleup.shadow' version '8.3.3'
    id 'java'
}

group = 'net.skullian.skyfactions'
version = '1.0-SNAPSHOT'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

repositories {
    mavenCentral()

    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }

    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        name = "EngineHub"
        url = "https://maven.enginehub.org/repo/"
    }

    maven {
        name = "PlaceholderAPI"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }

    maven {
        name = "XenonDevs Releases"
        url = "https://repo.xenondevs.xyz/releases"
    }

    maven {
        name = "CodeMC Public"
        url = "https://repo.codemc.org/repository/maven-public/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }

    maven {
        name = "EssentialsX Releases"
        url = "https://repo.essentialsx.net/releases/"
    }

    maven {
        name = "eldonexus"
        url = uri("https://eldonexus.de/repository/maven-releases/")
    }

    maven {
        name = "Lumine Public"
        url = "https://mvn.lumine.io/repository/maven-public/"
    }

    maven {
        name = "CitizensNPCs"
        url = "https://maven.citizensnpcs.co/repo"
    }

    maven {
        name = "Pyr's Snapshots"
        url = "https://repo.pyr.lol/snapshots"
    }

    maven {
        name = "JitPack"
        url "https://jitpack.io" 
    }

    maven {
        name = "SpigotMC Snapshots"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }

    maven{
        name = "FancyNPCs Repository"
        url = "https://repo.fancyplugins.de/releases"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")

    compileOnly("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.projectlombok:lombok:1.18.34")

    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.zaxxer:HikariCP:6.0.0")
    compileOnly("xyz.xenondevs.invui:invui:1.39")

    implementation(platform("com.intellectualsites.bom:bom-newest:1.50"))
    compileOnly("com.fastasyncworldedit:FastAsyncWorldEdit-Core")
    compileOnly("com.fastasyncworldedit:FastAsyncWorldEdit-Bukkit")

    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.1.0-SNAPSHOT")
    compileOnly("org.xerial:sqlite-jdbc:3.47.0.0")
    compileOnly("net.dv8tion:JDA:5.1.2")
    compileOnly("fr.skytasul:jukebox:1.20.8")
    compileOnly("com.github.koca2000:NoteBlockAPI:1.6.2")
    compileOnly("com.fasterxml.jackson.core:jackson-databind:2.18.1")
    compileOnly("com.mojang:authlib:3.3.39")
    compileOnly("com.jeff-media:custom-block-data:2.2.3")
    compileOnly("io.lumine:Mythic-Dist:5.7.2")
    compileOnly("net.objecthunter:exp4j:0.4.8")
    compileOnly("com.github.yannicklamprecht:worldborderapi:1.213.0:dev")
    compileOnly("com.github.retrooper:packetevents-spigot:2.5.0")
    implementation("com.github.Tofaa2.EntityLib:spigot:2.4.10-SNAPSHOT")
    compileOnly("dev.dejvokep:boosted-yaml:1.3.7")
    compileOnly("org.incendo:cloud-paper:2.0.0-SNAPSHOT")
    compileOnly("org.incendo:cloud-core:2.0.0")
    compileOnly("org.incendo:cloud-annotations:2.0.0")
    compileOnly("lol.pyr:znpcsplus-api:2.0.0-SNAPSHOT")
    compileOnly('net.citizensnpcs:citizens-main:2.0.36-SNAPSHOT')
    //errorprone("com.google.errorprone:error_prone_core:2.35.1")
	compileOnly("net.kyori:adventure-text-minimessage:4.17.0")
    compileOnly("de.oliver:FancyNpcs:2.3.1")

    paperweight.paperDevBundle("1.21.1-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "version": project.property("version")
    ]
}

